import sqlite3
import os
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def connect_to_database(db_path):
    """
    Établit une connexion à la base de données SQLite.
    
    Paramètres :
    db_path (str) : Le chemin vers le fichier de la base de données SQLite.
    
    Retourne :
    sqlite3.Connection : Objet de connexion à la base de données SQLite.
    """
    if not os.path.exists(os.path.dirname(db_path)):
        os.makedirs(os.path.dirname(db_path))
    try:
        conn = sqlite3.connect(db_path, detect_types=sqlite3.PARSE_DECLTYPES)
        logging.info("Connexion à la base de données établie avec succès.")
        return conn
    except sqlite3.Error as e:
        raise ConnectionError(f"Échec de la connexion à la base de données : {e}")

def ajouter_commandes(conn):
    """
    Ajoute une dizaine de commandes à la base de données.
    
    Paramètres :
    conn (sqlite3.Connection) : Objet de connexion à la base de données SQLite.
    """
    commandes = [
        (1, 'Produit A', '2024-10-01'),
        (2, 'Produit B', '2024-10-02'),
        (3, 'Produit C', '2024-10-03'),
        (4, 'Produit D', '2024-10-04'),
        (5, 'Produit E', '2024-10-05'),
        (6, 'Produit F', '2024-10-06'),
        (7, 'Produit G', '2024-10-07'),
        (8, 'Produit H', '2024-10-08'),
        (9, 'Produit I', '2024-10-09'),
        (10, 'Produit J', '2024-10-10')
    ]
    cursor = conn.cursor()
    try:
        cursor.executemany('''
            INSERT INTO Commandes (client_id, produit, date_commande)
            VALUES (?, ?, ?)
        ''', commandes)
        conn.commit()
        logging.info("Dix commandes ont été ajoutées avec succès.")
    except sqlite3.Error as e:
        raise RuntimeError(f"Échec de l'ajout des commandes : {e}")
    finally:
        cursor.close()

def main():
    """
    Fonction principale pour gérer la connexion à la base de données et l'ajout de commandes.
    """
    db_path = '../bdd/db.sqlite'
    
    try:
        # Se connecter à la base de données
        with connect_to_database(db_path) as conn:
            ajouter_commandes(conn)
    except (ConnectionError, RuntimeError) as e:
        logging.error(f"Erreur : {e}")
    except Exception as e:
        logging.critical(f"Une erreur inattendue est survenue : {e}")

if __name__ == "__main__":
    main()